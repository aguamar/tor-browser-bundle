---
name: "utils-mac"
distro: "debian"
suites:
- "jessie"
architectures:
- "amd64"
packages:
- "automake"
- "libtool"
- "zip"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://github.com/libevent/libevent.git"
  "dir": "libevent"
- "url": "https://github.com/wolfcw/libfaketime"
  "dir": "faketime"
- "url": "https://cmake.org/cmake.git"
  "dir": "cmake"
files:
- "MacOSX10.7.sdk.tar.gz"
- "llvm.tar.xz"
- "cfe.tar.xz"
- "libcxx.tar.xz"
- "libcxxabi.tar.xz"
- "openssl.tar.gz"
- "cctools.tar.gz"
- "versions"
- "dzip.sh"
- "libfaketime.patch"
script: |
  INSTDIR="$HOME/install"
  source versions
  export TZ=UTC
  export LC_ALL=C
  umask 0022

  # Cmake first
  cd cmake
  ./bootstrap --prefix=$INSTDIR/cmake
  make $MAKEOPTS
  make install
  export PATH=$PATH:$INSTDIR/cmake/bin

  # Clang
  cd ..
  tar xaf llvm.tar.xz
  tar xaf cfe.tar.xz
  tar xaf libcxx.tar.xz
  tar xaf libcxxabi.tar.xz
  mv cfe-* clang
  mv libcxx-* libcxx
  mv libcxxabi-* libcxxabi
  mv clang llvm-*/tools
  mv libcxx llvm-*/projects
  mv libcxxabi llvm-*/projects
  cd llvm-*
  export LLVM_HOME=`pwd`
  mkdir build
  cd build
  cmake .. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTDIR/clang -DCMAKE_BUILD_TYPE:STRING=Release $LLVM_HOME
  make $MAKEOPTS
  make install

  # Building libfaketime.
  cd ../../faketime
  export GIT_COMMITTER_NAME="nobody"
  export GIT_COMMITTER_EMAIL="nobody@localhost"
  export GIT_COMMITTER_DATE="$REFERENCE_DATETIME"
  git am ~/build/libfaketime.patch
  make
  DESTDIR="$INSTDIR/faketime" make install
  export FAKETIME_SKIP_CMDS="make"
  export FAKETIME=$REFERENCE_DATETIME

  cd ..
  tar xaf MacOSX10.7.sdk.tar.gz
  tar xaf cctools.tar.gz

  # Preparing clang for cross-compilation, setting the proper flags and
  # variables
  # ld needs libLTO.so from llvm
  export LD_LIBRARY_PATH="$INSTDIR/clang/lib"
  export PATH="$HOME/build/cctools/bin:$PATH"
  CROSS_CCTOOLS_PATH="$HOME/build/cctools"
  CROSS_SYSROOT="$HOME/build/MacOSX10.7.sdk"
  FLAGS="-target x86_64-apple-darwin10 -mlinker-version=136 -B $CROSS_CCTOOLS_PATH/bin -isysroot $CROSS_SYSROOT"
  export CC="$INSTDIR/clang/bin/clang $FLAGS"
  export LDFLAGS="-Wl,-syslibroot,$CROSS_SYSROOT -Wl,-dead_strip"

  # Building Libevent
  cd libevent
  ./autogen.sh
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  ./configure --disable-static --host=x86_64-apple-darwin10 --prefix=$INSTDIR/libevent
  export LD_PRELOAD="$INSTDIR/faketime/usr/local/lib/faketime/libfaketime.so.1"
  make $MAKEOPTS
  make install
  cd ..

  # Building OpenSSL
  # XXX: We still need libfaketime here it seems, see #19856 for details.
  # XXX: Check whether that's true after switching to clang as cross-compiler.
  # Tricking OpenSSL into using our clang as cross-compiler
  export CC="cc $FLAGS"
  ln -s $INSTDIR/clang/bin/clang x86_64-apple-darwin10-cc
  export PATH=$PATH:$HOME/build
  tar xzf openssl.tar.gz
  cd openssl-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  ./Configure --cross-compile-prefix=x86_64-apple-darwin10- darwin64-x86_64-cc --prefix=$INSTDIR/openssl enable-ec_nistp_64_gcc_128
  # Using $MAKEOPTS breaks the build. Might be the issue mentioned on
  # http://cblfs.cross-lfs.org/index.php/OpenSSL.
  make
  make install
  cd ..

  # Grabbing the results
  cd $INSTDIR
  ~/build/dzip.sh clang-$CLANG_VER-linux64-jessie-utils.zip clang
  ~/build/dzip.sh openssl-$OPENSSL_VER-mac64-utils.zip openssl
  ~/build/dzip.sh libevent-${LIBEVENT_TAG#release-}-mac64-utils.zip libevent
  cp *utils.zip $OUTDIR/
